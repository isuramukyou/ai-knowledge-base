import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { createHash, createHmac } from 'crypto'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram WebApp
function verifyTelegramWebAppData(initData: string): boolean {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    if (!botToken) {
      console.error("‚ùå MIDDLEWARE: TELEGRAM_BOT_TOKEN is not defined")
      return false
    }

    console.log("üîç MIDDLEWARE: Starting Telegram signature verification...")
    console.log("üîë MIDDLEWARE: Bot token:", botToken) // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω
    console.log("üîë MIDDLEWARE: Bot token length:", botToken.length)
    console.log("üîç MIDDLEWARE: RAW initData:", initData)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º hash –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
    const hashMatch = initData.match(/hash=([^&]*)/);
    if (!hashMatch) {
      console.error("‚ùå MIDDLEWARE: No hash found in initData");
      return false;
    }
    const hash = hashMatch[1];
    console.log("üìù MIDDLEWARE: Extracted hash:", hash);

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ë–ï–ó URLSearchParams!)
    const params = initData.split('&')
      .filter(p => !p.startsWith('hash=') && !p.startsWith('signature='))
      .map(p => {
        const eqIndex = p.indexOf('=');
        return {
          key: p.substring(0, eqIndex),
          value: p.substring(eqIndex + 1) || ''
        };
      });

    console.log("üî§ MIDDLEWARE: Found parameters:", params.map(p => p.key));

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á—É
    params.sort((a, b) => a.key.localeCompare(b.key));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–ë–ï–ó –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!)
    const dataCheckString = params.map(p => `${p.key}=${p.value}`).join('\n');
    console.log("üìã MIDDLEWARE: Data check string (with URL encoding preserved):");
    console.log(dataCheckString);

    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    const secretKey = createHash("sha256").update(botToken).digest()
    console.log("üîê MIDDLEWARE: Secret key created, length:", secretKey.length)

    // –í—ã—á–∏—Å–ª—è–µ–º HMAC
    const calculatedHash = createHmac("sha256", secretKey)
      .update(dataCheckString, "utf8")
      .digest("hex")

    console.log("üßÆ MIDDLEWARE: Calculated hash:", calculatedHash)
    console.log("üì® MIDDLEWARE: Expected hash:  ", hash)
    console.log("‚úÖ MIDDLEWARE: Hashes match:", calculatedHash === hash)

    const isValid = calculatedHash === hash;
    if (!isValid) {
      console.log("‚ùå MIDDLEWARE: SIGNATURE VERIFICATION FAILED!")
      console.log("üîç MIDDLEWARE: Debug info for failed verification:")
      console.log("- Bot token exists:", !!botToken)
      console.log("- Bot token (FULL):", botToken) // –ü–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω –±–µ–∑ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log("- InitData length:", initData.length)
      console.log("- InitData (FULL):", initData) // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log("- Hash extracted successfully:", !!hash)
      console.log("- Hash (FULL):", hash) // –ü–æ–ª–Ω—ã–π —Ö–µ—à
      console.log("- Parameters count:", params.length)
      console.log("- DataCheckString (FULL):", dataCheckString) // –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log("- Calculated hash (FULL):", calculatedHash) // –ü–æ–ª–Ω—ã–π –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à
    }

    return isValid;
  } catch (error) {
    console.error("‚ùå MIDDLEWARE: Error verifying Telegram WebApp data:", error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getUserByTelegramId(telegramId: string) {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ middleware –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Edge Runtime
    const { getUserByTelegramId: getUser } = await import('@/lib/models/user')
    return await getUser(telegramId)
  } catch (error) {
    console.error('Error getting user:', error)
    return null
  }
}

export async function middleware(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã
  if (request.nextUrl.pathname.startsWith('/admin')) {
    try {
      console.log("=== ADMIN MIDDLEWARE DEBUG ===")
      console.log("Request URL:", request.nextUrl.pathname)
      
      // –í Telegram Mini App –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage -> headers
      // Cookies –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ iframe
      const telegramIdFromHeader = request.headers.get('x-telegram-id')
      const telegramIdFromCookie = request.cookies.get('telegram_id')?.value
      const authTokenFromHeader = request.headers.get('x-auth-token')
      const authTokenFromCookie = request.cookies.get('auth_token')?.value
      
      console.log("üîç Detailed auth check:", {
        "x-telegram-id header": telegramIdFromHeader,
        "telegram_id cookie": telegramIdFromCookie,
        "x-auth-token header": authTokenFromHeader ? authTokenFromHeader.substring(0, 20) + "..." : null,
        "auth_token cookie": authTokenFromCookie ? authTokenFromCookie.substring(0, 20) + "..." : null,
        "all headers": Object.fromEntries(request.headers.entries()),
        "all cookies": Object.fromEntries(
          Array.from(request.cookies.getAll()).map(cookie => [cookie.name, cookie.value])
        )
      })

      const telegramId = telegramIdFromHeader || telegramIdFromCookie
      
      console.log("Final telegram_id:", telegramId)

      // –í development —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const isDevelopment = process.env.NODE_ENV === 'development'
      console.log("Environment:", process.env.NODE_ENV)
      console.log("Is development:", isDevelopment)
      
      if (!telegramId && !isDevelopment) {
        console.log('‚ùå No telegram_id found in production, redirecting to home')
        return NextResponse.redirect(new URL('/', request.url))
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å telegram_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
      if (telegramId) {
        console.log("‚úÖ Found telegram_id, checking user permissions:", telegramId)
        const user = await getUserByTelegramId(telegramId)
        
        if (!user) {
          console.log('‚ùå User not found in database, redirecting to home')
          return NextResponse.redirect(new URL('/', request.url))
        }

        console.log("‚úÖ User found in database:", {
          id: user.id,
          telegram_id: user.telegram_id,
          is_admin: user.is_admin,
          is_blocked: user.is_blocked
        })
        
        if (!user.is_admin) {
          console.log('‚ùå User is not admin, redirecting to home')
          return NextResponse.redirect(new URL('/', request.url))
        }

        if (user.is_blocked) {
          console.log('‚ùå User is blocked, redirecting to home')
          return NextResponse.redirect(new URL('/', request.url))
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const response = NextResponse.next()
        response.headers.set('x-user-id', user.id.toString())
        response.headers.set('x-user-admin', 'true')
        
        console.log("‚úÖ Admin access granted for user:", user.id)
        console.log("=== END ADMIN MIDDLEWARE DEBUG ===")
        return response
      }

      // –í development –±–µ–∑ telegram_id —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
      if (isDevelopment) {
        console.log('‚ö†Ô∏è Development mode: allowing admin access without telegram_id')
        console.log("=== END ADMIN MIDDLEWARE DEBUG ===")
        return NextResponse.next()
      }

    } catch (error) {
      console.error('‚ùå Middleware error:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ development - —Ä–∞–∑—Ä–µ—à–∞–µ–º, –≤ production - –±–ª–æ–∫–∏—Ä—É–µ–º
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ö†Ô∏è Development mode: allowing access despite error')
        return NextResponse.next()
      }
      return NextResponse.redirect(new URL('/', request.url))
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    '/admin/:path*',
  ]
} 